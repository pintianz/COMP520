package miniJava.ContextualAnalyzer;

import java.util.HashMap;
import java.util.Map.Entry;

import Triangle.AbstractSyntaxTrees.Declaration;
import Triangle.ContextualAnalyzer.IdEntry;
import miniJava.AbstractSyntaxTrees.*;

public class IdentificationTable {

  private int level;
  private HashMap<String, IdEntry>map;

  public IdentificationTable () {
    level = 1;
    map = new HashMap<String, IdEntry>();
  }

  
  private void addEntry(String id, IdEntry entry){
	  map.put(id, entry);
  }
  private void removeEntry(String id){
	  map.remove(id);
  }
  private IdEntry getEntry(String id){
	  map.get(id);
  }
  // Opens a new level in the identification table, 1 higher than the
  // current topmost level.

  public void openScope () {
    level ++;
  }

  // Closes the topmost level in the identification table, discarding
  // all entries belonging to that level.

  public void closeScope () {
	  	String id;
		IdEntry entry;
		
		for(Entry<String, IdEntry> e: map.entrySet()){
			id = e.getKey();
			entry = e.getValue();
	    	if(entry.level == this.level){
	    	    entry = entry.previous;
	    	    removeEntry(id);
	    	    if(entry != null){
	    	    	addEntry(id, entry);
	    	    }
	    	}
		}
		
		this.level--;
  }
  
  public boolean exist (String id) {
	  return map.containsKey(id);
  }
  
  
  // Makes a new entry in the identification table for the given identifier
  // and attribute. The new entry belongs to the current level.
  // duplicated is set to to true iff there is already an entry for the
  // same identifier at the current level.

  public void enter (String id, Declaration attr) {
	  IdEntry entry;
	  if(exist(id)){
		  //Previous declaration of the name exist
		  boolean dup =false;
		  IdEntry prev = getEntry(id);
		  if(entry.level == level || entry.level>=3){
			  //duplicated
			  dup = true;
			  attr.duplicated = dup;
		  } 
		  entry = new IdEntry(id, attr, level, prev);
		  addEntry(id,entry);
	  } else{
		//Id declared for the 1st time
		 entry = new IdEntry(id, attr, level, null);
		 addEntry(id, entry);
	  }
  }

  // Finds an entry for the given identifier in the identification table,
  // if any. If there are several entries for that identifier, finds the
  // entry at the highest level, in accordance with the scope rules.
  // Returns null iff no entry is found.
  // otherwise returns the attribute field of the entry found.

  public Declaration retrieve (String id) {

    IdEntry entry;
    Declaration attr = null;
    boolean present = false, searching = true;

    entry = this.latest;
    while (searching) {
      if (entry == null)
        searching = false;
      else if (entry.id.equals(id)) {
        present = true;
        searching = false;
        attr = entry.attr;
      } else
        entry = entry.previous;
    }

    return attr;
  }

}
