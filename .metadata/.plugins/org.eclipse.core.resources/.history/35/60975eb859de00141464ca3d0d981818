/**
 *   COMP 520 
 *   Simple expression scanner and parser
 *     following package structure of a full compiler
 *
 *  Parser grammar:
 *   S ::= E '$'
 *   E ::= T (oper T)*     
 *   T ::= num | '(' E ')'
 *
 *  Scanner grammar:
 *   num ::= digit digit*
 *   digit ::= '0' | ... | '9'
 *   oper ::= '+' | '*'
 */

package miniJava;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URL;

import mJAM.ObjectFile;
import miniJava.AbstractSyntaxTrees.ASTDisplay;
import miniJava.AbstractSyntaxTrees.AST;
import miniJava.CodeGenerator.Encoder;
import miniJava.ContextualAnalyzer.IdentificationAnalyzer;
import miniJava.ContextualAnalyzer.TypeCheckAnalyzer;
import miniJava.SyntacticAnalyzer.Parser;
import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.SourceFile;

/**
 * Recognize whether input is an arithmetic expression as defined by
 * a simple context free grammar for expressions and a scanner grammar.
 * 
 */
public class Compiler {
	
	static String implicitImport = "ImplicitImports.mjava";

	/**
	 * @param args  if no args provided parse from keyboard input
	 *              else args[0] is name of file containing input to be parsed  
	 */
	public static void main(String[] args) {

		InputStream inputStream = null;
		if (args.length == 0) {
			System.out.println("Input file not provided");
			System.exit(1);
		}
		else {
			if(args[0].lastIndexOf(".") == -1){
				System.out.println("No extension specified in input filename");
				System.exit(1);
			}
			String extension = args[0].substring(args[0].lastIndexOf(".") + 1, args[0].length());
			if(extension.equalsIgnoreCase("java") && extension.equalsIgnoreCase("mjava")){
				System.out.println("Extensionb " +extension+ " not reconized, file must be either .java or .mjava");
				System.exit(1);
			}
			try {
				inputStream = new FileInputStream(args[0]);
			} catch (FileNotFoundException e) {
				System.out.println("Input file " + args[0] + " not found");
				System.exit(1);
			}		
		}

		SourceFile sourceFile = new SourceFile(inputStream);
		ErrorReporter reporter = new ErrorReporter();
		Scanner scanner = new Scanner(sourceFile, reporter, false);
		Parser parser = new Parser(scanner, reporter);
		IdentificationAnalyzer idenAnalyzer = new IdentificationAnalyzer(reporter);
		TypeCheckAnalyzer typeCheckAnalyzer = new TypeCheckAnalyzer(reporter);
		Encoder encoder = new Encoder(reporter);
		
		//generate Implicit Import AST
		SourceFile sourceFileII = null;
		Compiler c = new Compiler();
		sourceFileII = c.getImplicitImport(implicitImport);
		if(sourceFileII == null) System.exit(4);
		
		Scanner scannerII = new Scanner(sourceFileII, reporter,true);
		Parser parserII = new Parser(scannerII, reporter);
		AST astII = parserII.parse();
		
		System.out.println("Syntactic analysis ... ");
		AST ast = parser.parse();
		System.out.println("Syntactic analysis complete:  ");
//		ASTDisplay astd = new ASTDisplay();
//		astd.showTree(ast);
		if (reporter.hasErrors()) {
			System.out.println(" - Syntactic analysis ERROR");
			System.exit(4);
		} else {
			System.out.println(" - Syntactic analysis PASSED");
		}
		System.out.println("");
		
		
		System.out.println("Contexual analysis ... ");
		idenAnalyzer.check(ast, astII);
		if (reporter.hasErrors()) {
			System.out.println(" - Contexual analysis ERROR");
			System.exit(4);
		}
		typeCheckAnalyzer.check(ast);
		System.out.println("Contexual analysis complete:  ");
		
		if (reporter.hasErrors()) {
			System.out.println(" - Contexual analysis ERROR");
			System.exit(4);
		} else {
			System.out.println(" - Contexual analysis PASSED");
		}
		
		encoder.encodeRun(ast);
		System.out.println("Contexual analysis complete:  ");
		
		if (reporter.hasErrors()) {
			System.out.println(" - Contexual analysis ERROR");
			System.exit(4);
		} else {
			System.out.println(" - Contexual analysis PASSED");
		}
		
		String objFileName = args[0].substring(0, args[0].lastIndexOf("."));
		/* write code to object code file */
		ObjectFile objF = new ObjectFile(objFileName+".mJAM");
		System.out.print("Writing object code file " + objFileName + " ... ");
		if (objF.write()) {
			System.out.println("FAILED!");
			System.exit(4);
		}
		else System.out.println("SUCCEEDED");
		
		System.exit(0);
	}
	
	SourceFile getImplicitImport(String s){
		SourceFile sourceFileII = null;
		try {
			URL resource = this.getClass().getResource(s);
			File file = new File(resource.toURI());
			FileInputStream input = new FileInputStream(file);
			sourceFileII = new SourceFile(input);
		} catch (FileNotFoundException | URISyntaxException | NullPointerException e2) {
			System.out.println("Implicit Import file not found");
		}
		return sourceFileII;
	}
}






